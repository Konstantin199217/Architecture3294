                                       Стратегия (Strategy)
=======================================================================================================================
    Поведенческий паттерн проектирования, который определяет семейство похожих алгоритмов и помещает каждый из них в
собственный класс, после чего алгоритмы взаимозаменяются прямо во время исполнения программы.
=======================================================================================================================
    Стоит использовать, когда:
          - Есть много родственных классов, отличающихся только поведением;
          - Мы хотим иметь несколько разных вариантов алгоритма;
          - В алгоритме содержаться данные, о которых клиент не должен знать;
          - В классе определено много поведений, что представлено разветвленными условными операторами. В этом случае
            проще перенести код из ветвей в отдельные класс стратегии;
=======================================================================================================================
                                    Преимущества и недостатки Strategy
    +
      * Изолирует код и данные алгоритмов от остальных классов;
      * Уход от наследования к делегированию;
      * Реализует принцип открытости - закрытости;
    -
      * Усложняет код программы из-за введения дополнительных подклассов;
      * Клиент должен знать в чем разница между стратегиями, чтобы выбрать подходящую;
=======================================================================================================================
!!! В отличии от паттерна State управление активностью объекта при использовании Strategy происходит в клиентском коде,
    а не в классе объекта !!!

Пример взят с: https://www.youtube.com/watch?v=rsB2exGsR4I&list=PLlsMRoVt5sTPgGbinwOVnaF1mxNeLAD7P&index=26