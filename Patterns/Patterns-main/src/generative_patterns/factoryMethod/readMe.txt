                                       Фабричный метод (Factory Method)
=======================================================================================================================
    Порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе,
позволяя подклассам изменять тип создаваемых объектов.
    В паттерне "фабрика" создается объект, не раскрывая логики создания клиенту, а клиент использует тот же общий
интерфейс для создания нового типа объекта.
    Паттерн "фабрика" вводит общую связь между классами. Свободная связь может быть введена в архитектуру приложения
путем программирования на основе абстрактных сущностей, а не конкретных реализаций.
=======================================================================================================================
    Стоит использовать, когда:
      - заранее известны типы и зависимости объектов, с которыми работает код;
      - хотим дать возможность пользователям расширять части приложения;
      - требуется экономить ресурсы, повторно используя уже созданные объекты, вместо порождения новых;
=======================================================================================================================
                                    Преимущества и недостатки Factory Method
    +
      * Избавляет класс от привязки к конкретным классам продуктов;
      * Выделяет код производства продуктов в одно место, упрощая поддержку кода;
      * Упрощает добавление новых продуктов в программу;
      * Реализует принцип открытости - закрытости;
    -
      * Иногда приводит к созданию больших параллельных иерархий классов, так как для каждого класса надо создать
        свой класс;
=======================================================================================================================
Пример взят с: https://javarush.com/groups/posts/2370-pattern-proektirovanija-factory