                                       Декоратор (Decorator)
=======================================================================================================================
    Структурный паттерн проектирования, который позволяет динамически добавлять объектам новую функциональность,
оборачивая их в полезные обертки.
=======================================================================================================================
    Стоит использовать, когда:
          - В случае динамического прозрачного для клиентов добавления обязанностей объектам;
          - Для реализации обязанностей, которые могут быть сняты с объекта;
          - Когда расширение путем порождения подклассов по каким-то причинам неудобно или невозможно. Иногда приходится
            реализовывать много независимых решений, так что порождение подклассов для поддержки всех возможных
            комбинаций приведет к комбинаторному росту их числа. В других случаях определение класса может быть скрыто
            или почему-либо еще не доступно, из-за чего породить от него подкласс нельзя;
=======================================================================================================================
                                    Преимущества и недостатки Decorator
    +
      * Большая гибкость, чем у наследования;
      * Можно добавлять несколько новых обязанностей сразу;
      * Позволяет иметь несколько мелких объектов вместо одно объекта для всего;
    -
      * Трудно конфигурировать многократно обернутые объекты;
      * Обилие маленьких классов;
=======================================================================================================================
Пример взят с: http://codernet.ru/articles/drugoe/dekorator_java_primer_patterna_shablon_proektirovaniya_na_yazyike_java/